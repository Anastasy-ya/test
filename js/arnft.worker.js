const browser=function(){const r=function(r){return r.test(navigator.userAgent)};switch(!0){case r(/edg/i):return"Microsoft Edge";case r(/trident/i):return"Microsoft Internet Explorer";case r(/firefox|fxios/i):return"Mozilla Firefox";case r(/opr\//i):return"Opera";case r(/ucbrowser/i):return"UC Browser";case r(/samsungbrowser/i):return"Samsung Browser";case r(/chrome|chromium|crios/i):return"Google Chrome";case r(/safari/i):return"Apple Safari";default:return"Other"}}();"Apple Safari"===browser?importScripts("./ARToolkitNFT.js"):importScripts("./ARToolkitNFT_simd.js");let arController=null,currentMarkerResult=null,nextImageData=null,interpolationFactor=1;const currentMatrix={delta:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],interpolated:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]};async function load(r){console.log("Loading camera at: ",r.cameraParamUrl),console.log("Setting interpolation factor to: ",r.interpolationFactor);try{arController=await ARToolkitNFT.ARControllerNFT.initWithDimensions(r.pw,r.ph,r.cameraParamUrl),arController.addEventListener("getNFTMarker",(function(r){currentMarkerResult=r.data})),interpolationFactor=r.interpolationFactor,postMessage({type:"loaded",proj:JSON.stringify(arController.getCameraMatrix())})}catch(r){console.error(r)}}function loadMarkers(r){arController.loadNFTMarkers(r,(function(r){const t=r.map(((r,t)=>(arController.trackNFTMarkerId(r),arController.getNFTData(arController.id,t))));postMessage({type:"markerInfos",markers:t}),console.log("loadNFTMarkers -> ",r),postMessage({type:"markersLoaded",end:!0})}),(function(r){console.error("Error in loading marker on Worker",r)}))}self.onmessage=function(r){const t=r.data;switch(t.type){case"load":return void load(t);case"loadMarkers":return void loadMarkers(t.markers);case"process":nextImageData=t.imagedata,process()}};const previousDeltas=[],maxStoredFrames=7;let totalDelta=0;function calculateAverageDelta(r){return 0===r.length?0:r.reduce(((r,t)=>r+t))/r.length}function process(){if(arController&&arController.process&&arController.process(nextImageData),currentMarkerResult){const r=currentMarkerResult.matrixGL_RH;for(let t=0;t<r.length;t++)currentMatrix.delta[t]=r[t]-currentMatrix.interpolated[t],totalDelta+=Math.abs(currentMatrix.delta[t]);previousDeltas.length>7&&previousDeltas.shift(),previousDeltas.push(totalDelta);const t=calculateAverageDelta(previousDeltas),e=4;totalDelta>=t+2&&totalDelta<t+e?(console.log("totalDelta:",totalDelta,"averageDelta:",t),console.error("Маркер незначительно двигается, сглаживание минимально"),dynamicFactor=20*interpolationFactor):totalDelta>=t+e?(console.log("totalDelta:",totalDelta,"averageDelta:",t),console.error("Маркер начал движение, сглаживания нет"),dynamicFactor=1*interpolationFactor):(console.log("totalDelta:",totalDelta,"averageDelta:",t),console.warn("Маркер остановился, максимальное сглаживание"),dynamicFactor=50*interpolationFactor),console.log(interpolationFactor*dynamicFactor,"interpolationFactor * dynamicFactor");for(let t=0;t<r.length;t++)currentMatrix.interpolated[t]=currentMatrix.interpolated[t]+currentMatrix.delta[t]/dynamicFactor;postMessage({type:"found",index:JSON.stringify(currentMarkerResult.index),matrixGL_RH:JSON.stringify(currentMatrix.interpolated)})}else postMessage({type:"lost"});currentMarkerResult=null,totalDelta=0,postMessage({type:"processNext"})}